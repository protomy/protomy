name: Continuous Integration

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: true
          git_committer_name: Protomy Bot
          git_committer_email: automation@protomy.dev
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Set up Ruby
        uses: actions/setup-ruby@v1
        if: "startsWith(github.ref, 'refs/pulls')"
        with:
          ruby-version: 2.7

      - name: Install bundle
        if: "startsWith(github.ref, 'refs/pulls')"
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3

      - name: Run Danger
        if: "startsWith(github.ref, 'refs/pulls')"
        run: |
          bundle exec danger --verbose
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.27

      - name: Run tests and build
        run: make ci

      - name: Upload code coverage
        uses: codecov/codecov-action@v1.0.7

      - name: Log in to Docker
        run: |
          echo $GITHUB_TOKEN | docker login docker.pkg.github.com -u protomybot --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        if: "!startsWith(github.ref, 'refs/tags/')"
        with:
          version: latest
          args: release --rm-dist --skip-publish --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Clean
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
